library(readr)
library(caret)
library(dplyr)
library(Hmisc)
library(ggplot2)
kc_house_data <- read_csv("data/kc_house_data.csv")
inTraining <- createDataPartition(pull(kc_house_data), p = .7, list = FALSE,times = 1)
house_training <- slice(kc_house_data, inTraining)
house_testing <- slice(kc_house_data, -inTraining)
describe(house_training)
#Ver los factores de cada variable
str(house_training)
#Ver los factores de cada variable
str(house_training)
#Vemos que hay varios ids repetidos
describe(house_training$id)
ids_duplicados <- house_training[which(duplicated(house_training$id)),]
View(ids_duplicados)
#Primero ordenamos descendenetemente todas las variables según la fecha para quedarnos con los más actuales (house_training_order)
#y eliminar los duplicados con una fecha inferior (house_training_WO)
house_training_order <-  house_training[order(house_training$date, decreasing = TRUE),]
house_training_WO <- house_training_order[!duplicated(house_training_order$id), ]
View(house_training_WO)
# price: posible re-escalado.
describe(house_training_WO$price)
ggplot(data = house_training_WO) + geom_density(aes(price))
ggplot(data = house_training_WO) + geom_density(aes(log10(price)))
# bathrooms: OK. Los americanos son raros
#se han convertido todos los baños que están a 0 en N/A. No se redondea porque según los decimales indican
#si es baño, aseo, etc.
house_training_WO$bathrooms[house_training_WO$bathrooms=='0'] <- "N/A"
View(house_training_WO)
# yr_renovated: muchos ceros que son not available.
house_training_WO$yr_renovated[house_training_WO$yr_renovated=='0'] <- "N/A"
describe(house_training_WO$yr_renovated)
describe(house_training$yr_renovated)
describe(house_training_WO$yr_renovated)
View(house_training_WO)
#Ver los factores de cada variable
str(house_training)
library(VIM)
library("VIM"
)
install.packages(VIM)
install.packages("VIM")
library(VIM)
install.packages("VIM")
install.packages("curl")
install.packages("curl")
install.packages("VIM")
help("knn3")
help("kNN")
help("knnreg")
library(VIM)
kNN(data = house_training_WO$bedrooms, dist_var = c("lat", "long"), k = 5)
# yr_renovated: muchos ceros que son not available.
house_training_WO$yr_renovated[house_training_WO$yr_renovated=='0'] <- "N/A"
house_training_WO$yr_renovated
# bedrooms: posible error en 33. Dato muy atípico.
#     imputar como la media
house_training_WO$yr_renovated[house_training_WO$bedrooms==33] <- "N/A"
kNN(data = house_training_WO$bedrooms, dist_var = c("lat", "long"), k = 5)
#     imputar como la media
house_training_WO$yr_renovated[house_training_WO$bedrooms==33] <- "N/A"
house_training_WO$bedrooms
table(house_training_WO$bedrooms)
#     imputar como la media
house_training_WO$yr_renovated[house_training_WO$bedrooms==33] <- "N/A"
table(house_training_WO$bedrooms)
#Ver los factores de cada variable
str(house_training)
library(readr)
library(caret)
library(dplyr)
library(Hmisc)
library(ggplot2)
library(VIM)
kc_house_data <- read_csv("data/kc_house_data.csv")
inTraining <- createDataPartition(pull(kc_house_data), p = .7, list = FALSE,times = 1)
house_training <- slice(kc_house_data, inTraining)
house_testing <- slice(kc_house_data, -inTraining)
describe(house_training)
#Ver los factores de cada variable
str(house_training)
#Vemos que hay varios ids repetidos
describe(house_training$id)
ids_duplicados <- house_training[which(duplicated(house_training$id)),]
View(ids_duplicados)
#Primero ordenamos descendenetemente todas las variables según la fecha para quedarnos con los más actuales (house_training_order)
#y eliminar los duplicados con una fecha inferior (house_training_WO)
house_training_order <-  house_training[order(house_training$date, decreasing = TRUE),]
house_training_WO <- house_training_order[!duplicated(house_training_order$id), ]
View(house_training_WO)
# price: posible re-escalado.
describe(house_training_WO$price)
ggplot(data = house_training_WO) + geom_density(aes(price))
ggplot(data = house_training_WO) + geom_density(aes(log10(price)))
# bathrooms: OK. Los americanos son raros
#se han convertido todos los baños que están a 0 en N/A. No se redondea porque según los decimales indican
#si es baño, aseo, etc.
house_training_WO$bathrooms[house_training_WO$bathrooms=='0'] <- "N/A"
View(house_training_WO)
table(house_training_WO$bedrooms)
#     imputar como la media
house_training_WO$bedrooms[house_training_WO$bedrooms==33] <- "N/A"
table(house_training_WO$bedrooms)
kNN(data = house_training_WO$bedrooms, dist_var = c("lat", "long"), k = 5)
kNN(data = house_training_WO, dist_var = c("lat", "long"), k = 5)
kc_house_data <- read_csv("data/kc_house_data.csv")
inTraining <- createDataPartition(pull(kc_house_data), p = .7, list = FALSE,times = 1)
house_training <- slice(kc_house_data, inTraining)
house_testing <- slice(kc_house_data, -inTraining)
describe(house_training)
#Ver los factores de cada variable
str(house_training)
#Vemos que hay varios ids repetidos
describe(house_training$id)
ids_duplicados <- house_training[which(duplicated(house_training$id)),]
#Primero ordenamos descendenetemente todas las variables según la fecha para quedarnos con los más actuales (house_training_order)
#y eliminar los duplicados con una fecha inferior (house_training_WO)
house_training_order <-  house_training[order(house_training$date, decreasing = TRUE),]
# price: posible re-escalado.
describe(house_training_WO$price)
ggplot(data = house_training_WO) + geom_density(aes(price))
ggplot(data = house_training_WO) + geom_density(aes(log10(price)))
# bathrooms: OK. Los americanos son raros
#se han convertido todos los baños que están a 0 en N/A. No se redondea porque según los decimales indican
#si es baño, aseo, etc.
house_training_WO$bathrooms[house_training_WO$bathrooms=='0'] <- "N/A"
#     imputar como la media
house_training_WO$bedrooms[house_training_WO$bedrooms==33] <- "N/A"
# yr_renovated: muchos ceros que son not available.
house_training_WO$yr_renovated[house_training_WO$yr_renovated=='0'] <- "N/A"
describe(house_training$yr_built)
str(house_training_WO)
table(house_training_WO$bedrooms)
kNN(house_training_WO, var = c("bedrooms"), dist_var = c("lat", "long"), k = 5)
house1 <- kNN(house_training_WO, var = c("bedrooms"), dist_var = c("lat", "long"), k = 5)
house1 <- kNN(house_training_WO, variable = c("bedrooms"), dist_var = c("lat", "long"), k = 5)
house1 <- kNN(house_training_WO, variable = c("bedrooms"), k = 5)
house1 <- kNN(house_training_WO, variable = c("bedrooms"), k = 6)
describe(house_training_WO$bedrooms)
house1 <- kNN(house_training_WO, variable = c("bedrooms"), k = 6)
summary(house1)
library(readr)
library(caret)
library(dplyr)
library(Hmisc)
library(ggplot2)
library(VIM)
kc_house_data <- read_csv("data/kc_house_data.csv")
inTraining <- createDataPartition(pull(kc_house_data), p = .7, list = FALSE,times = 1)
house_training <- slice(kc_house_data, inTraining)
house_testing <- slice(kc_house_data, -inTraining)
ids_duplicados <- house_training[which(duplicated(house_training$id)),]
#Primero ordenamos descendenetemente todas las variables según la fecha para quedarnos con los más actuales (house_training_order)
#y eliminar los duplicados con una fecha inferior (house_training_WO)
house_training_order <-  house_training[order(house_training$date, decreasing = TRUE),]
house_training_WO <- house_training_order[!duplicated(house_training_order$id), ]
# bathrooms: OK. Los americanos son raros
#se han convertido todos los baños que están a 0 en N/A. No se redondea porque según los decimales indican
#si es baño, aseo, etc.
house_training_WO$bathrooms[house_training_WO$bathrooms=='0'] <- "N/A"
#     imputar como la media
house_training_WO$bedrooms[house_training_WO$bedrooms==33] <- "N/A"
# kNN imputation:
house1 <- kNN(house_training_WO, variable = c("bedrooms"), dist_var = c("lat", "long"), k = 5)
#     imputar como la media
house_training_WO$bedrooms[house_training_WO$bedrooms==33] <- N/A
#     imputar como la media
house_training_WO$bedrooms[house_training_WO$bedrooms==33] <- "N/A"
house_training_WO$bedrooms %>% dplyr::na_if(33)
table(house_training_WO$bedrooms)
#     imputar como la media
house_training_WO$bedrooms[house_training_WO$bedrooms==33] <- "N/A"
table(house_training_WO$bedrooms)
house_training_WO$bedrooms %>% dplyr::na_if(33)
# kNN imputation:
house1 <- kNN(house_training_WO, variable = c("bedrooms"), dist_var = c("lat", "long"), k = 5)
table(house1$bedrooms)
# kNN imputation:
house1 <- kNN(house_training_WO, variable = c("bedrooms"), dist_var = c("lat", "long"), k = 6)
# kNN imputation:
house1 <- kNN(house_training_WO, variable = c("Bedrooms"), dist_var = c("lat", "long"), k = 6)
# kNN imputation:
house1 <- kNN(house_training_WO, variable = c("bedrooms"), dist_var = c("lat", "long"), k = 6)
summary(house_training_WO$bedrooms)
summary(house_training$bedrooms)
house_training_WO <- house_training_order[!duplicated(house_training_order$id), ]
summary(house_training_WO$bedrooms)
house_training_WO$bedrooms %>% dplyr::na_if(33)
summary(house_training_WO$bedrooms)
# kNN imputation:
house1 <- kNN(house_training_WO, variable = c("bedrooms"), dist_var = c("lat", "long"), k = 6)
house_training_WO$bedrooms %>% dplyr::na_if(33)
summary(house_training_WO$bedrooms)
table(house_training_WO$bedrooms)
house_training_WO$bedrooms %>% dplyr::na_if(33)
table(house_training_WO$bedrooms)
summary(house_training_WO$bedrooms)
house_training_WO$bedrooms %>% dplyr::na_if(house_training_WO$bedrooms == 33)
summary(house_training_WO$bedrooms)
house_training_WO$bedrooms %>% dplyr::na_if(house_training_WO$bedrooms == 33) %>% summary
house_training_WO$bedrooms %>% dplyr::na_if(33) %>% summary
kc_house_data <- read_csv("data/kc_house_data.csv")
inTraining <- createDataPartition(pull(kc_house_data), p = .7, list = FALSE,times = 1)
house_training <- slice(kc_house_data, inTraining)
house_testing <- slice(kc_house_data, -inTraining)
house_training_WO <- house_training_order[!duplicated(house_training_order$id), ]
house_training_WO$bedrooms %>% dplyr::na_if(33) %>% summary
summary(house_training_WO$bedrooms)
house_training_WO$bedrooms %>% dplyr::na_if(33)
table(house_training_WO$bedrooms)
house_training_WO$bedrooms <- house_training_WO$bedrooms %>% dplyr::na_if(33)
table(house_training_WO$bedrooms)
summary(house_training_WO$bedrooms)
# kNN imputation:
house1 <- kNN(house_training_WO, variable = c("bedrooms"), dist_var = c("lat", "long"), k = 6)
summary(house1)
summary(house_training)
summary(house_training_WO)
describe(house_training)
# bathrooms: OK. Los americanos son raros
#se han convertido todos los baños que están a 0 en N/A. No se redondea porque según los decimales indican
#si es baño, aseo, etc.
house_training_WO$bathrooms[house_training_WO$bathrooms=='0'] <- "N/A"
summary(house_training_WO$bathrooms)
# bathrooms: OK. Los americanos son raros
#se han convertido todos los baños que están a 0 en N/A. No se redondea porque según los decimales indican
#si es baño, aseo, etc.
house_training_WO$bathrooms%>% dplyr::na_if(0) %>% summary
#Vemos que hay varios ids repetidos
describe(house_training$id)
kc_house_data <- read_csv("data/kc_house_data.csv")
inTraining <- createDataPartition(pull(kc_house_data), p = .7, list = FALSE,times = 1)
house_training <- slice(kc_house_data, inTraining)
house_testing <- slice(kc_house_data, -inTraining)
ids_duplicados <- house_training[which(duplicated(house_training$id)),]
#Primero ordenamos descendenetemente todas las variables según la fecha para quedarnos con los más actuales (house_training_order)
#y eliminar los duplicados con una fecha inferior (house_training_WO)
house_training_order <-  house_training[order(house_training$date, decreasing = TRUE),]
house_training_WO <- house_training_order[!duplicated(house_training_order$id), ]
# bathrooms: OK. Los americanos son raros
#se han convertido todos los baños que están a 0 en N/A. No se redondea porque según los decimales indican
#si es baño, aseo, etc.
house_training_WO$bathrooms%>% dplyr::na_if(0) %>% summary
# bathrooms: OK. Los americanos son raros
#se han convertido todos los baños que están a 0 en N/A. No se redondea porque según los decimales indican
#si es baño, aseo, etc.
house_training_WO$bathrooms%>% dplyr::na_if(0)
# bathrooms: OK. Los americanos son raros
#se han convertido todos los baños que están a 0 en N/A. No se redondea porque según los decimales indican
#si es baño, aseo, etc.
house_training_WO$bathrooms <- house_training_WO$bathrooms%>% dplyr::na_if(0)
summary(house_training_WO$bathrooms)
#     imputar como la media
house_training_WO$bedrooms <- house_training_WO$bedrooms %>% dplyr::na_if(33)
table(house_training_WO$bedrooms)
#     imputar como la media
house_training_WO$bedrooms <- house_training_WO$bedrooms %>% dplyr::na_if(33)
table(house_training_WO$bedrooms)
kc_house_data <- read_csv("data/kc_house_data.csv")
inTraining <- createDataPartition(pull(kc_house_data), p = .7, list = FALSE,times = 1)
house_training <- slice(kc_house_data, inTraining)
house_testing <- slice(kc_house_data, -inTraining)
ids_duplicados <- house_training[which(duplicated(house_training$id)),]
#Primero ordenamos descendenetemente todas las variables según la fecha para quedarnos con los más actuales (house_training_order)
#y eliminar los duplicados con una fecha inferior (house_training_WO)
house_training_order <-  house_training[order(house_training$date, decreasing = TRUE),]
house_training_WO <- house_training_order[!duplicated(house_training_order$id), ]
# bathrooms: OK. Los americanos son raros
#se han convertido todos los baños que están a 0 en N/A. No se redondea porque según los decimales indican
#si es baño, aseo, etc.
house_training_WO$bathrooms <- house_training_WO$bathrooms%>% dplyr::na_if(0)
summary(house_training_WO$bathrooms)
#     imputar como la media
house_training_WO$bedrooms <- house_training_WO$bedrooms %>% dplyr::na_if(33)
table(house_training_WO$bedrooms)
# kNN imputation:
house1 <- kNN(house_training_WO, variable = c("bedrooms"), dist_var = c("lat", "long"), k = 6)
table(house1$bedrooms)
?na_if
# imputam como la media de las casa mas cercanas.
house_training_WO$bedrooms <- house_training_WO$bedrooms %>% na_if(33)
table(house_training_WO$bedrooms)
house_training <- slice(kc_house_data, inTraining)
table(house_training_WO$bedrooms)
house_training_WO <- house_training_order[!duplicated(house_training_order$id), ]
table(house_training_WO$bedrooms)
# imputam como la media de las casa mas cercanas.
house_training_WO$bedrooms <- house_training_WO$bedrooms %>% na_if(33)
table(house_training_WO$bedrooms)
summary(house_training_WO$bedrooms)
# kNN imputation:
house1 <- kNN(house_training_WO, variable = c("bedrooms"), dist_var = c("lat", "long"), k = 6)
table(house1$bedrooms)
# imputam como la media de las casa mas cercanas.
house_training_WO <- house_training_order[!duplicated(house_training_order$id), ]
house_training_WO$bedrooms <- house_training_WO$bedrooms %>% na_if(33)
table(house_training_WO$bedrooms)
summary(house_training_WO$bedrooms)
# kNN imputation:
house1 <- kNN(house_training_WO, variable = c("bedrooms"), dist_var = c("lat", "long"), k = 5)
table(house1$bedrooms)
# imputam como la media de las casa mas cercanas.
house_training_WO <- house_training_order[!duplicated(house_training_order$id), ]
house_training_WO$bedrooms <- house_training_WO$bedrooms %>% na_if(33)
table(house_training_WO$bedrooms)
summary(house_training_WO$bedrooms)
# kNN imputation:
house1 <- kNN(house_training_WO, variable = c("bedrooms"), dist_var = c("lat", "long"), k = 10)
table(house1$bedrooms)
# imputam como la media de las casa mas cercanas.
house_training_WO <- house_training_order[!duplicated(house_training_order$id), ]
house_training_WO$bedrooms <- house_training_WO$bedrooms %>% na_if(33)
table(house_training_WO$bedrooms)
summary(house_training_WO$bedrooms)
# kNN imputation de los 5 vecinos mas cercanos:
house1 <- kNN(house_training_WO, variable = c("bedrooms"), dist_var = c("lat", "long"), k = 5)
table(house1$bedrooms)
summary()
# yr_renovated: muchos ceros que son not available.
house_training_WO$yr_renovated %>% dplyr::na_if(0)
summary(house_training_WO$yr_renovated)
table(house_training_WO$yr_renovated)
summary(house_training_WO$bedrooms)
summary(house_training_WO$yr_renovated)
# imputam como la media de las casa mas cercanas.
house_training_WO <- house_training_order[!duplicated(house_training_order$id), ]
# yr_renovated: muchos ceros que son not available.
table(house_training_WO$yr_renovated)
house_training_WO$yr_renovated %>% dplyr::na_if(0)
table(house_training_WO$yr_renovated)
house_training_WO$yr_renovated <- house_training_WO$yr_renovated %>% dplyr::na_if(0)
table(house_training_WO$yr_renovated)
summary(house_training_WO$yr_renovated)
table(house1$bedrooms)
house_training[order(house_training$date, decreasing = TRUE),]
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(caret)
library(dplyr)
library(Hmisc)
library(ggplot2)
library(VIM)
kc_house_data <- read_csv("data/kc_house_data.csv")
inTraining <- createDataPartition(pull(kc_house_data), p = .7, list = FALSE,times = 1)
house_training <- slice(kc_house_data, inTraining)
house_testing <- slice(kc_house_data, -inTraining)
summary(house_training$bedrooms)
inTraining <- createDataPartition(pull(kc_house_data), p = .7, list = FALSE,times = 1)
house_training <- slice(kc_house_data, inTraining)
house_testing <- slice(kc_house_data, -inTraining)
summary(house_training$bedrooms)
house_training$bedrooms <- house_training$bedrooms %>% na_if(33)
house_training <- kNN(house_training, variable = c("bedrooms"), dist_var = c("lat", "long"), k = 5)
summary(house_training$bedrooms)
